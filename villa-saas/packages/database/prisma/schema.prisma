generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== MULTI-TENANCY ====================

model Tenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Informations du propriétaire
  name        String
  email       String   @unique
  phone       String?
  companyName String?
  siret       String?
  vatNumber   String?
  
  // Adresse
  address     String?
  city        String?
  postalCode  String?
  country     String   @default("FR")

  // Configuration
  subdomain     String?  @unique
  customDomain  String?  @unique
  isActive      Boolean  @default(true)
  settings      Json     @default("{}")

  // Stripe Connect
  stripeAccountId         String?
  stripeAccountStatus     String?
  stripeDetailsSubmitted  Boolean @default(false)
  stripeChargesEnabled    Boolean @default(false)
  stripePayoutsEnabled    Boolean @default(false)
  
  // Stripe Billing (Abonnements)
  stripeCustomerId        String?
  stripeSubscriptionId    String?
  subscriptionPlan        String?  // 'starter', 'standard', 'enterprise'
  subscriptionStatus      String?  // 'active', 'cancelled', 'past_due', etc.
  subscriptionEndDate     DateTime?

  // Relations
  users         User[]
  properties    Property[]
  bookings      Booking[]
  periods       Period[]
  tourists      TouristTax[]
  emails        EmailTemplate[]
  integrations  Integration[]
  auditLogs     AuditLog[]
  publicSite    PublicSite?
  promoCodes    PromoCode[]
  conversations Conversation[]
  autoResponseTemplates AutoResponseTemplate[]
  autoResponseRules    AutoResponseRule[]
  bookingOptions BookingOption[]
  paymentConfiguration PaymentConfiguration?
  domainOrders DomainOrder[]

  @@index([email])
  @@index([subdomain])
  @@index([customDomain])
}

// ==================== SITES PUBLICS ====================

model PublicSite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Configuration domaine
  domain        String?  @unique
  subdomain     String?  @unique
  isActive      Boolean  @default(false)
  
  // Personnalisation
  theme         Json?    // Couleurs, fonts, etc.
  logo          String?
  favicon       String?
  metadata      Json?    // SEO, analytics
  
  // Localisation
  defaultLocale String   @default("fr")
  locales       Json     @default("[\"fr\"]")
  
  // Analytics
  googleAnalyticsId String?
  facebookPixelId   String?
  
  @@index([domain])
  @@index([subdomain])
  @@index([tenantId])
}

// ==================== UTILISATEURS ====================

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String  @unique
  passwordHash   String
  firstName      String
  lastName       String
  phone          String?
  isActive       Boolean @default(true)
  emailVerified  Boolean @default(false)

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Rôle et permissions
  role        UserRole @default(USER)
  permissions Json     @default("[]")
  
  // Métadonnées (invitations, etc.)
  metadata    Json?

  // Tokens
  refreshTokens RefreshToken[]
  sessions      Session[]

  // Relations
  bookings       Booking[]
  auditLogs      AuditLog[]
  mobileSessions MobileSession[]
  loyaltyProgram LoyaltyProgram?
  
  // Messagerie
  conversationParticipants ConversationParticipant[]
  messages                 Message[]
  messageReads            MessageRead[]
  
  // Domaines
  domainOrders DomainOrder[]

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([email])
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model RefreshToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model SignupSession {
  id               String   @id @default(cuid())
  sessionToken     String   @unique @default(cuid())
  email            String
  passwordHash     String?
  firstName        String?
  lastName         String?
  phone            String?
  companyName      String?
  address          String?
  city             String?
  postalCode       String?
  country          String?
  selectedPlan     String?
  stripeSessionId  String?
  currentStep      Int      @default(0)
  completedSteps   Json     @default("[]") // Array of completed step numbers
  metadata         Json?    // Pour stocker d'autres données
  expiresAt        DateTime // Session expire après 24h
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([email])
  @@index([sessionToken])
  @@index([stripeSessionId])
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique
  userAgent String?
  ip        String?
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

// ==================== PROPRIÉTÉS ====================

model Property {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Informations de base
  name         String
  slug         String
  propertyType PropertyType
  status       PropertyStatus @default(DRAFT)

  // Localisation
  address      String
  city         String
  postalCode   String
  country      String  @default("FR")
  latitude     Float?
  longitude    Float?

  // Capacité
  bedrooms    Int
  bathrooms   Int
  maxGuests   Int
  surfaceArea Float? // en m²

  // Description multilingue
  description Json // { fr: "", en: "", es: "", ... }

  // Tarifs de base
  basePrice        Float
  weekendPremium   Float?  @default(0)
  cleaningFee      Float?
  securityDeposit  Float?

  // Règles
  minNights        Int     @default(1)
  checkInTime      String  @default("16:00")
  checkOutTime     String  @default("11:00")
  checkInDays      Json    @default("[1,2,3,4,5,6,0]") // Jours autorisés
  instantBooking   Boolean @default(false)

  // Équipements et caractéristiques (pour l'IA)
  amenities         Json    @default("{}") // { wifi: true, pool: true, ... }
  atmosphere        Json    @default("{}") // { romantic: 0.8, family: 0.9, ... }
  proximity         Json    @default("{}") // { beach: 500, shops: 200, ... }
  
  // Recherche IA
  searchableContent String? @db.Text
  embedding         Float[] @default([]) // Vector pour similarité sémantique
  
  // Custom Pages Configuration
  customPages       Json?    // { location: true, activities: true, services: true, reviews: true }
  
  // Custom Pages Content
  locationContent   Json?    // { description: { fr: "", en: "" }, nearbyPlaces: [...] }
  roomsContent      Json?    // [ { name: { fr: "", en: "" }, description: { fr: "", en: "" }, beds: [...], amenities: [...] } ]
  activitiesContent Json?    // [ { name: { fr: "", en: "" }, description: { fr: "", en: "" }, distance: number, price: string, category: string } ]
  servicesContent   Json?    // { included: [...], optional: [...], onRequest: [...] }

  // Domaine
  subdomain           String?
  customDomain        String?
  domainPurchasePending Boolean @default(false)

  // Médias
  images           PropertyImage[]
  
  // Relations
  bookings         Booking[]
  blockedPeriods   BlockedPeriod[]
  periods          Period[]
  reviews          Review[]
  mlPredictions    MLPrediction[]
  propertyEmbedding PropertyEmbedding?
  smartDevices     SmartDevice[]
  analytics        PropertyAnalytics[]
  conversations    Conversation[]
  autoResponseRules AutoResponseRule[]
  bookingOptions   PropertyBookingOption[]
  domainOrders     DomainOrder[]
  
  @@unique([tenantId, slug])
  @@index([tenantId])
  @@index([status])
  @@index([slug])
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  STUDIO
  LOFT
  CHALET
  BUNGALOW
  MOBILE_HOME
  BOAT
  OTHER
}

enum PropertyStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model PropertyImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  url         String      // URL de base ou originale
  urls        Json?       // URLs des différentes tailles {small, medium, large, original}
  alt         String?
  caption     Json?       // Multilingue
  order       Int
  isPrimary   Boolean  @default(false)
  
  @@unique([propertyId, order])
  @@index([propertyId])
}

// ==================== TARIFICATION ====================

model Period {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  name       String
  startDate  DateTime
  endDate    DateTime
  priority   Int      @default(0) // Plus élevé = plus prioritaire

  // Tarifs
  basePrice         Float
  weekendPremium    Float?
  minNights         Int?
  checkInDays       Json?   // Override les jours de check-in

  // Application
  isGlobal   Boolean @default(false) // S'applique à toutes les propriétés du tenant
  isActive   Boolean @default(true)

  @@index([tenantId])
  @@index([propertyId])
  @@index([startDate, endDate])
  @@index([priority])
}

// ==================== RÉSERVATIONS ====================

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Référence unique
  reference String @unique @default(cuid())

  // Dates
  checkIn  DateTime
  checkOut DateTime
  nights   Int

  // Invités
  adults   Int
  children Int      @default(0)
  infants  Int      @default(0)
  pets     Int      @default(0)

  // Informations client
  guestFirstName String
  guestLastName  String
  guestEmail     String
  guestPhone     String
  guestCountry   String?
  guestAddress   String?
  guestNotes     String? @db.Text

  // Statut
  status BookingStatus

  // Montants
  accommodationTotal Float
  cleaningFee        Float @default(0)
  touristTax         Float @default(0)
  extraFees          Json  @default("[]") // Frais additionnels
  discountAmount     Float @default(0)
  discountCode       String?
  promoCodeId        String?
  promoCode          PromoCode? @relation(fields: [promoCodeId], references: [id], onDelete: SetNull)
  subtotal           Float
  total              Float
  currency           String @default("EUR")

  // Options réservées
  selectedOptions    BookingSelectedOption[]

  // Paiement
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  depositAmount   Float         @default(0)
  depositPaid     Boolean       @default(false)
  
  // Commission
  commissionRate   Float   @default(0.15) // 15%
  commissionAmount Float
  payoutAmount     Float
  payoutStatus     PayoutStatus @default(PENDING)
  stripeTransferId String?

  // Annulation
  cancellationDate      DateTime?
  cancellationReason    String?
  refundAmount          Float?
  stripeRefundId        String?

  // Métadonnées
  source           String? // website, airbnb, booking, etc.
  externalId       String? // ID de réservation externe
  specialRequests  String? @db.Text
  internalNotes    String? @db.Text

  // Relations
  payments              Payment[]
  reviews               Review[]
  blockchainTransactions BlockchainTransaction[]
  conversations         Conversation[]
  
  @@index([tenantId])
  @@index([propertyId])
  @@index([userId])
  @@index([reference])
  @@index([status])
  @@index([checkIn, checkOut])
  @@index([guestEmail])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ==================== PAIEMENTS ====================

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  amount          Float
  currency        String
  type            PaymentType
  status          PaymentStatus
  stripePaymentId String?
  metadata        Json?

  @@index([bookingId])
  @@index([stripePaymentId])
}

enum PaymentType {
  BOOKING
  DEPOSIT
  REFUND
  EXTRA
}

// ==================== PÉRIODES BLOQUÉES ====================

model BlockedPeriod {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate   DateTime
  reason    String?
  notes     String?

  @@index([propertyId])
  @@index([startDate, endDate])
}

// ==================== TAXES DE SÉJOUR ====================

model TouristTax {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name        String
  enabled     Boolean @default(true)
  
  // Configuration du calcul
  calculationType TaxCalculationType
  amount          Float?             // Montant fixe par personne par nuit
  percentage      Float?             // Pourcentage du prix
  maxAmount       Float?             // Plafond par personne par nuit
  
  // Exemptions
  exemptions Json @default("{ \"minAge\": 18, \"maxNights\": null }")
  
  // Application
  startDate DateTime?
  endDate   DateTime?
  
  @@index([tenantId])
}

enum TaxCalculationType {
  FIXED_PER_PERSON_PER_NIGHT
  PERCENTAGE_OF_PRICE
  HYBRID
}

// ==================== AVIS ====================

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Notes
  overall      Int // 1-5
  cleanliness  Int?
  accuracy     Int?
  checkIn      Int?
  communication Int?
  location     Int?
  value        Int?

  // Commentaire
  comment      String? @db.Text
  privateReply String? @db.Text

  // Statut
  isPublished Boolean @default(true)
  isVerified  Boolean @default(false)

  @@index([propertyId])
  @@index([bookingId])
  @@index([overall])
}

// ==================== EMAILS ====================

model EmailTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  type      EmailType
  name      String
  subject   Json      // Multilingue
  content   Json      // Multilingue, HTML
  variables Json      // Variables disponibles
  isActive  Boolean   @default(true)

  @@unique([tenantId, type])
  @@index([tenantId])
  @@index([type])
}

enum EmailType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLATION
  PAYMENT_CONFIRMATION
  PAYMENT_FAILED
  REVIEW_REQUEST
  WELCOME_OWNER
  WELCOME_GUEST
}

model EmailLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Multi-tenancy
  tenantId String
  
  recipient String
  subject   String
  template  String
  status    String   // sent, failed, bounced
  
  metadata  Json?
  sentAt    DateTime?
  error     String?
  
  @@index([tenantId])
  @@index([status])
  @@index([createdAt])
}

// ==================== MESSAGERIE ====================

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Propriété concernée (optionnel si conversation générale)
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  // Réservation liée (optionnel)
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  // Participants
  participants ConversationParticipant[]
  
  // Messages
  messages Message[]
  
  // Chatbot
  chatbotSession ChatbotSession?

  // Métadonnées
  subject     String?
  lastMessage String? @db.Text
  lastMessageAt DateTime?
  unreadCount Int @default(0)
  status      ConversationStatus @default(ACTIVE)
  
  // Tags et catégories
  tags        String[]
  priority    ConversationPriority @default(NORMAL)

  @@index([tenantId])
  @@index([propertyId])
  @@index([bookingId])
  @@index([status])
  @@index([lastMessageAt])
}

model ConversationParticipant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Participant peut être un user enregistré ou un invité
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Pour les invités non enregistrés
  guestEmail String?
  guestName  String?
  
  // Statut du participant
  role       ParticipantRole @default(MEMBER)
  lastSeen   DateTime?
  isTyping   Boolean @default(false)
  unreadCount Int @default(0)

  @@unique([conversationId, userId])
  @@unique([conversationId, guestEmail])
  @@index([conversationId])
  @@index([userId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Expéditeur
  senderId    String?
  sender      User?    @relation(fields: [senderId], references: [id], onDelete: SetNull)
  senderEmail String?  // Pour les invités
  senderName  String?

  // Contenu
  content     String @db.Text
  type        MessageType @default(TEXT)
  
  // Pièces jointes
  attachments MessageAttachment[]
  
  // Métadonnées
  metadata    Json?
  
  // Statut
  status      MessageStatus @default(SENT)
  readBy      MessageRead[]
  editedAt    DateTime?
  deletedAt   DateTime?

  // Pour les messages vocaux
  duration    Int? // Durée en secondes
  transcription String? @db.Text

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  type      AttachmentType
  name      String
  url       String
  size      Int
  mimeType  String

  @@index([messageId])
}

model MessageRead {
  id        String   @id @default(cuid())
  
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

// Types pour la messagerie
enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum ConversationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  SYSTEM
  LOCATION
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

// ==================== RÉPONSES AUTOMATIQUES ====================

model AutoResponseTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Informations du template
  name        String
  description String?
  category    AutoResponseCategory
  trigger     AutoResponseTrigger
  
  // Contenu
  content     Json    // Multilingue {fr: string, en: string}
  variables   String[] // Variables disponibles ex: ["{property_name}", "{guest_name}"]
  
  // Conditions
  conditions  Json?   // Conditions pour déclencher (horaires, mots-clés, etc.)
  priority    Int     @default(0) // Plus haute priorité = appliqué en premier
  
  // Statut
  isActive    Boolean @default(true)
  
  // Analytics
  usageCount  Int     @default(0)
  lastUsedAt  DateTime?

  @@index([tenantId])
  @@index([category])
  @@index([trigger])
  @@index([isActive])
}

model AutoResponseRule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Règle
  name        String
  description String?
  
  // Déclencheurs
  triggers    Json    // Exemples: {keywords: ["prix", "tarif"], time: {from: "18:00", to: "09:00"}}
  
  // Actions
  actions     Json    // {type: "send_template", templateId: "...", delay: 0}
  
  // Conditions
  propertyId  String? // Appliquer seulement pour cette propriété
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  
  // Statut
  isActive    Boolean @default(true)
  priority    Int     @default(0)

  @@index([tenantId])
  @@index([propertyId])
  @@index([isActive])
}

model ChatbotSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // État de la session
  context     Json    // Contexte de la conversation (propriété, dates, invités, etc.)
  state       ChatbotState @default(GREETING)
  language    String  @default("fr")
  
  // Historique des échanges pour l'IA
  history     Json    @default("[]") // Messages échangés avec l'IA
  
  // Métriques
  messagesCount Int @default(0)
  resolved      Boolean @default(false)
  handedOff     Boolean @default(false) // Transféré à un humain

  @@unique([conversationId])
  @@index([state])
}

enum AutoResponseCategory {
  GREETING              // Salutation initiale
  AVAILABILITY         // Questions sur disponibilité
  PRICING              // Questions sur les prix
  AMENITIES           // Questions sur les équipements
  CHECK_IN_OUT        // Procédures d'arrivée/départ
  LOCATION            // Questions sur l'emplacement
  BOOKING_CONFIRM     // Confirmation de réservation
  BOOKING_REMINDER    // Rappels
  THANK_YOU           // Remerciements
  FAQ                 // Questions fréquentes
  OUT_OF_OFFICE       // Hors bureau
  CUSTOM              // Personnalisé
}

enum AutoResponseTrigger {
  NEW_CONVERSATION    // Nouvelle conversation
  KEYWORD            // Mots-clés détectés
  TIME_BASED         // Basé sur l'heure
  NO_RESPONSE        // Pas de réponse après X temps
  BOOKING_CREATED    // Réservation créée
  BOOKING_UPCOMING   // Réservation proche
  AFTER_STAY         // Après le séjour
  MANUAL             // Déclenchement manuel
}

enum ChatbotState {
  GREETING           // Salutation initiale
  COLLECTING_INFO    // Collecte d'informations
  CHECKING_AVAILABILITY // Vérification disponibilité
  PROVIDING_INFO     // Fourniture d'informations
  BOOKING_ASSIST     // Aide à la réservation
  WAITING_HUMAN      // En attente d'un humain
  RESOLVED           // Résolu
}

// ==================== INTÉGRATIONS ====================

model Integration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  type         IntegrationType
  isActive     Boolean         @default(true)
  credentials  Json            // Chiffré
  settings     Json
  lastSyncAt   DateTime?
  syncStatus   String?

  @@unique([tenantId, type])
  @@index([tenantId])
  @@index([type])
}

enum IntegrationType {
  AIRBNB
  BOOKING_COM
  GOOGLE_CALENDAR
  ICAL
}

// ==================== AUDIT ====================

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  action   String
  entity   String
  entityId String?
  details  Json?
  ip       String?
  userAgent String?

  @@index([tenantId])
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}

// ==================== RECHERCHE IA ====================

model SearchQuery {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  originalQuery    String   @db.Text
  parsedIntent     Json     // Intention extraite par IA
  embedding        Float[] @default([]) // Vector de la requête
  
  // Résultats
  returnedIds      String[] // IDs des propriétés retournées
  clickedId        String?  // ID cliqué
  bookedId         String?  // ID réservé
  
  // Métriques
  processingTimeMs Int
  resultCount      Int
  
  @@index([createdAt])
}

// ==================== CODES PROMOTIONNELS ====================

model PromoCode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Code unique
  code         String   @unique
  description  String?
  
  // Type de réduction
  discountType DiscountType // PERCENTAGE ou FIXED_AMOUNT
  discountValue Float       // Pourcentage (0-100) ou montant fixe
  
  // Conditions
  minAmount    Float?       // Montant minimum de réservation
  minNights    Int?         // Nombre minimum de nuits
  propertyIds  String[]     // Propriétés éligibles (vide = toutes)
  
  // Période de validité
  validFrom    DateTime
  validUntil   DateTime
  
  // Limites d'utilisation
  maxUses      Int?         // Nombre max d'utilisations (null = illimité)
  maxUsesPerUser Int?       // Max par utilisateur
  currentUses  Int          @default(0)
  
  // Statut
  isActive     Boolean      @default(true)
  
  // Relations
  bookings     Booking[]
  
  @@index([code])
  @@index([tenantId])
  @@index([validFrom, validUntil])
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// ==================== PHASE 4 - IA & INNOVATIONS ====================

// Conversations IA
model AIConversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId        String?
  sessionId     String   // Pour les utilisateurs non connectés
  
  messages      Json[]   // Historique de la conversation
  context       Json     // Contexte et préférences extraites
  
  // Résultats
  searchResults Json[]   // Propriétés suggérées
  bookingId     String?  // Si conversion en réservation
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

// Prédictions ML
model MLPrediction {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  type          PredictionType
  targetDate    DateTime
  prediction    Json     // Valeurs prédites
  confidence    Float    // Score de confiance 0-1
  actualValue   Float?   // Valeur réelle (pour comparaison)
  
  @@index([propertyId])
  @@index([type])
  @@index([targetDate])
}

enum PredictionType {
  PRICE_OPTIMAL
  DEMAND_FORECAST
  OCCUPANCY_RATE
  REVENUE_PROJECTION
}

// Embeddings pour recherche sémantique
model PropertyEmbedding {
  id            String   @id @default(cuid())
  propertyId    String   @unique
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  embedding     Float[]  // Vecteur de dimension 1536 (OpenAI)
  model         String   // Modèle utilisé (ex: text-embedding-3-small)
  updatedAt     DateTime @default(now())
  
  @@index([propertyId])
}

// Sessions mobiles
model MobileSession {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  deviceId      String
  platform      String   // ios, android
  appVersion    String
  osVersion     String
  
  pushToken     String?  @unique
  lastSync      DateTime @default(now())
  isActive      Boolean  @default(true)
  
  @@index([userId])
  @@index([deviceId])
}

// Dispositifs IoT
model SmartDevice {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  type          DeviceType
  manufacturer  String
  model         String
  serialNumber  String?
  
  // Connexion
  apiEndpoint   String?
  credentials   Json?    // Chiffré
  
  // État
  status        Json     // État actuel du dispositif
  lastSeen      DateTime
  isOnline      Boolean  @default(false)
  
  @@index([propertyId])
  @@index([type])
}

enum DeviceType {
  SMART_LOCK
  THERMOSTAT
  CAMERA
  SMOKE_DETECTOR
  NOISE_MONITOR
  ENERGY_METER
}

// Transactions blockchain
model BlockchainTransaction {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  
  bookingId     String
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  type          BlockchainTxType
  network       String   // ethereum, polygon, etc.
  txHash        String   @unique
  
  // Détails
  fromAddress   String
  toAddress     String
  amount        String   // En wei
  gasUsed       String?
  
  // Statut
  status        String   // pending, confirmed, failed
  confirmations Int      @default(0)
  confirmedAt   DateTime?
  
  @@index([bookingId])
  @@index([txHash])
  @@index([status])
}

enum BlockchainTxType {
  DEPOSIT_LOCK
  DEPOSIT_RELEASE
  PAYMENT
  REFUND
  SMART_CONTRACT_CALL
}

// Programme de fidélité
model LoyaltyProgram {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  points        Int      @default(0)
  tier          LoyaltyTier @default(BRONZE)
  
  // Statistiques
  totalBookings Int      @default(0)
  totalSpent    Float    @default(0)
  
  // NFTs
  nftTokenIds   String[] // IDs des NFTs possédés
  
  @@index([userId])
  @@index([tier])
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

// Analytics avancés
model PropertyAnalytics {
  id            String   @id @default(cuid())
  date          DateTime @db.Date
  
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Métriques
  views         Int      @default(0)
  searches      Int      @default(0)
  bookings      Int      @default(0)
  revenue       Float    @default(0)
  
  // Sources
  sourceData    Json     // Détail par source (direct, search, social...)
  
  // Comparaisons
  marketAverage Json?    // Données moyennes du marché
  
  @@unique([propertyId, date])
  @@index([propertyId])
  @@index([date])
}

// ==================== OPTIONS DE RÉSERVATION ====================

model BookingOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Informations de base
  name        Json    // Multilingue { fr: "Ménage quotidien", en: "Daily cleaning" }
  description Json?   // Multilingue
  category    OptionCategory
  
  // Configuration du prix
  pricingType      OptionPricingType // PER_PERSON, PER_GROUP, FIXED
  pricePerUnit     Float
  pricingPeriod    OptionPricingPeriod // PER_DAY, PER_STAY
  
  // Règles
  isMandatory      Boolean @default(false)
  minQuantity      Int     @default(0)
  maxQuantity      Int?    // null = illimité
  
  // Conditions d'application
  minGuests        Int?    // Nombre minimum d'invités pour que l'option soit disponible
  maxGuests        Int?    // Nombre maximum d'invités
  minNights        Int?    // Nombre minimum de nuits
  availableSeasons Json?   // Saisons où l'option est disponible
  
  // Statut
  isActive         Boolean @default(true)
  order            Int     @default(0) // Ordre d'affichage
  
  // Relations
  properties       PropertyBookingOption[]
  selectedOptions  BookingSelectedOption[]
  
  @@index([tenantId])
  @@index([category])
  @@index([isActive])
}

// Relation entre propriété et option
model PropertyBookingOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  optionId String
  option   BookingOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  // Override des paramètres pour cette propriété
  customPrice      Float?
  customMinQuantity Int?
  customMaxQuantity Int?
  isEnabled        Boolean @default(true)
  
  @@unique([propertyId, optionId])
  @@index([propertyId])
  @@index([optionId])
}

// Options sélectionnées dans une réservation
model BookingSelectedOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  optionId String
  option   BookingOption @relation(fields: [optionId], references: [id])
  
  // Détails de la sélection
  quantity    Int
  unitPrice   Float    // Prix unitaire au moment de la réservation
  totalPrice  Float    // Prix total (quantity * unitPrice * nights si applicable)
  
  // Snapshot des infos au moment de la réservation
  optionName  String   // Nom dans la langue du client
  pricingType String   // Type de tarification utilisé
  
  @@index([bookingId])
  @@index([optionId])
}

enum OptionCategory {
  CLEANING          // Services de ménage
  CATERING         // Restauration, petit-déjeuner, etc.
  TRANSPORT        // Navette, location véhicule
  ACTIVITIES       // Activités et excursions
  EQUIPMENT        // Location matériel (vélos, kayak, etc.)
  WELLNESS         // Spa, massage, etc.
  CHILDCARE        // Garde d'enfants, lit bébé
  PET              // Services pour animaux
  COMFORT          // Packs confort (draps premium, etc.)
  OTHER            // Autres services
}

enum OptionPricingType {
  PER_PERSON       // Prix par personne
  PER_GROUP        // Prix pour le groupe entier
  FIXED            // Prix fixe
}

enum OptionPricingPeriod {
  PER_DAY          // Prix par jour
  PER_STAY         // Prix pour tout le séjour
}

// ==================== CONFIGURATION AVANCÉE DES PAIEMENTS ====================

model PaymentConfiguration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Configuration de l'acompte
  depositType      DepositType      // PERCENTAGE ou FIXED_AMOUNT
  depositValue     Float            // Pourcentage (0-100) ou montant fixe
  depositDueDate   DepositDueDate   // AT_BOOKING ou DAYS_BEFORE_CHECKIN
  depositDueDays   Int?             // Nombre de jours avant check-in si applicable
  
  // Configuration de la taxe de séjour
  touristTaxEnabled     Boolean @default(false)
  touristTaxType        TouristTaxType? // PER_PERSON_PER_NIGHT, PERCENTAGE, etc.
  touristTaxAdultPrice  Float?  // Prix par adulte
  touristTaxChildPrice  Float?  // Prix par enfant
  touristTaxChildAge    Int?    // Âge limite pour être considéré comme enfant
  touristTaxPeriod      TouristTaxPeriod? // PER_NIGHT ou PER_STAY
  touristTaxMaxNights   Int?    // Nombre max de nuits taxées
  
  // Frais de service
  serviceFeeEnabled     Boolean @default(false)
  serviceFeeType        FeeType? // PERCENTAGE ou FIXED_AMOUNT
  serviceFeeValue       Float?
  
  // Règles de paiement
  allowPartialPayment   Boolean @default(true)
  balanceDueDays        Int     @default(7) // Solde dû X jours avant check-in
  
  @@index([tenantId])
}

enum DepositType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum DepositDueDate {
  AT_BOOKING          // À la réservation
  DAYS_BEFORE_CHECKIN // X jours avant l'arrivée
}

enum TouristTaxType {
  PER_PERSON_PER_NIGHT
  PERCENTAGE_OF_ACCOMMODATION
  FIXED_PER_STAY
  TIERED_BY_PROPERTY_TYPE
}

enum TouristTaxPeriod {
  PER_NIGHT
  PER_STAY
}

enum FeeType {
  PERCENTAGE
  FIXED_AMOUNT
}
// ==================== DOMAINES ====================

model DomainOrder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Propriété associée
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Utilisateur qui a commandé
  userId String
  user   User @relation(fields: [userId], references: [id])

  // Détails du domaine
  domain String
  price  Float

  // Statut
  status DomainOrderStatus @default(PENDING)
  
  // Paiement
  stripeSessionId String?
  completedAt     DateTime?

  @@index([tenantId])
  @@index([propertyId])
  @@index([userId])
  @@index([status])
}

enum DomainOrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
